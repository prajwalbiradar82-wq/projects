CREATE DATABASE NEW;
USE NEW;
drop table sales;
CREATE TABLE Sales (
    Row_ID INT,
    Order_ID VARCHAR(20),
    Order_Date VARCHAR(20),   -- keep as text for now
    Ship_Date VARCHAR(20),    -- keep as text for now
    Ship_Mode VARCHAR(50),
    Customer_ID VARCHAR(20),
    Customer_Name VARCHAR(100),
    Segment VARCHAR(50),
    Country VARCHAR(50),
    City VARCHAR(100),
    State VARCHAR(100),
    Postal_Code VARCHAR(20),
    Region VARCHAR(50),
    Product_ID VARCHAR(30),
    Category VARCHAR(50),
    Sub_Category VARCHAR(50),
    Product_Name VARCHAR(200),
    Sales DECIMAL(12,2),
    Quantity INT,
    Discount DECIMAL(15,3),
    Profit DECIMAL(12,7)
);

LOAD DATA INFILE 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/projectsql.csv'
INTO TABLE Sales
character set latin1
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM SALES;

SELECT COUNT(
DISTINCT(CUSTOMER_NAME)
) FROM SALES; -- 793

-- > TOP 10 CUSTOMER WITH MOST NO.OF ORDERS

SELECT CUSTOMER_NAME,COUNT(ORDER_ID)
FROM SALES GROUP BY CUSTOMER_NAME 
ORDER BY COUNT(*) DESC LIMIT 10;

-- > MOST BOUGHT CATEGORY
SELECT  CATEGORY,COUNT(CATEGORY) FROM SALES
GROUP BY CATEGORY 
ORDER BY COUNT(*) DESC;

-- > AVG CATEGORY WISE SALES
SELECT ROUND(AVG(SALES),2),CATEGORY FROM SALES 
GROUP BY CATEGORY
ORDER BY AVG(SALES) DESC;

-- > COUNT OF EACH SEGMENT
SELECT COUNT(SEGMENT),SEGMENT FROM SALES
 GROUP BY SEGMENT;
 
-- >  TOP 10 CITY WITH MOST SALES
SELECT CITY,SALES FROM SALES  
ORDER BY SALES DESC LIMIT 10;
 
 -- > REGION WISE AVG SALES
SELECT REGION ,ROUND(AVG(SALES),0) FROM SALES
 GROUP BY REGION;
 
-- > MAX PROFIT CITY
SELECT COUNTRY,CITY,PROFIT FROM SALES 
WHERE PROFIT IN
(SELECT MAX(PROFIT) FROM SALES);

-- > GREATER THAN AVG PROFIT RECORDS
SELECT SEGMENT,CITY,STATE,ROUND(PROFIT,2)
 FROM SALES WHERE PROFIT >
(SELECT ROUND(AVG(PROFIT),2) FROM SALES );

-- > STATE WISE % CONTRIBUTION
SELECT STATE,
CONCAT(ROUND(SUM(SALES)*100.0/(SELECT SUM(SALES) FROM SALES),2),'%')
AS PERCENT 
FROM SALES
GROUP BY STATE ORDER BY 
ROUND(SUM(SALES)*100.0/(SELECT SUM(SALES) FROM SALES),2) DESC;

-- > PROFITABLE CATEFORY
SELECT CATEGORY,PROFIT  FROM SALES WHERE PROFIT =
(SELECT MAX(PROFIT) FROM SALES);

SELECT SUB_CATEGORY,COUNT(SUB_CATEGORY) FROM SALES 
WHERE CATEGORY ='FURNITURE'
GROUP BY SUB_CATEGORY ORDER BY COUNT(*) DESC;

SELECT STATE,
MAX(SALES), 
MIN(SALES),
AVG(SALES),
SUM(SALES)FROM SALES
GROUP BY STATE;

SELECT SUM(SALES),REGION FROM SALES 
GROUP BY REGION  
ORDER BY SUM(SALES) DESC;

SELECT STATE,COUNT
(CASE WHEN SEGMENT = 'CONSUMER' AND SALES >100 THEN 1 ELSE 0 END)
AS CNT 
FROM SALES
GROUP BY STATE;

SELECT COUNT(CUSTOMER_ID),SHIP_MODE FROM SALES 
GROUP BY SHIP_MODE;

SELECT STATE,COUNTRY,REGION,
SALES*QUANTITY 
AS
REVENUE_GENERATED FROM SALES
ORDER BY REVENUE_GENERATED DESC;

SELECT COUNT(SALES) FROM  SALES
WHERE ORDER_DATE_CLEAN <  SHIP_DATE;


-- > TOP 5 PRODUCT WITH MAX PROFIT
SELECT PRODUCT_NAME,ROUND(MAX(PROFIT),2) FROM SALES 
GROUP BY PRODUCT_NAME 
ORDER BY MAX(PROFIT) DESC LIMIT 5;

-- >CUSTOMERS WHO BOUGHT MORE THAN 10 HAVING PROFIT IN NEGATIVE
SELECT CUSTOMER_NAME,COUNT(ORDER_ID) AS CNT 
FROM SALES
GROUP BY CUSTOMER_NAME 
HAVING COUNT(*)>10
AND SUM(PROFIT) <0;

-- > TOP 3 PRODUCTS IN EACH CATEGORY WITH MAX SALES
WITH CTE AS (SELECT PRODUCT_NAME,SALES,CATEGORY,DENSE_RANK () 
OVER (PARTITION BY CATEGORY ORDER BY SALES DESC) RN
FROM SALES )

SELECT * FROM CTE WHERE RN IN (1,2,3) ;

-- > COUNT OF ORDERS ON MONTHLY BASIS
SELECT DATE_FORMAT(ORDER_DATE_CLEAN,'%Y-%M') 
MONTH,COUNT(ORDER_ID)
FROM SALES 
GROUP BY MONTH
ORDER BY COUNT(*) DESC;

SELECT PRODUCT_NAME,CONCAT(ROUND(PROFIT/SALES,2),'%') AS 
PROFIT_MARGIN FROM SALES
ORDER BY PROFIT_MARGIN DESC;


UPDATE SALES 
SET SHIP_DATE = DATE_ADD(ORDER_DATE, INTERVAL 2 DAY)
WHERE ORDER_DATE > SHIP_DATE;

-- > AVG SHIPPING THROUGH DIFFERENT SHIP_MODE
SELECT SHIP_MODE, ROUND(AVG(DATEDIFF(SHIP_DATE,ORDER_DATE)),0) DIFF 
FROM SALES WHERE
DATEDIFF(SHIP_DATE,ORDER_DATE) BETWEEN 0 AND 30
GROUP BY SHIP_MODE 
ORDER BY DIFF;

SELECT ORDER_ID AS CURRENT_ORDER,LAG(ORDER_DATE) OVER
(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) AS
PREVIOUS_ORDER ,
DATEDIFF(ORDER_DATE,LAG(ORDER_DATE) OVER
(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE)
) AS DAYS_BETWEEN FROM SALES;






